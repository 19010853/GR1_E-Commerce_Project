{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../../api/api\";\nexport const get_seller_payment_details = createAsyncThunk('payment/get_seller_payment_details', async (sellerId, {\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get(`/payment/seller-payment-details/${sellerId} `, {\n      withCredentials: true\n    });\n    return fulfillWithValue(data);\n  } catch (error) {\n    // console.log(error.response.data)\n    return rejectWithValue(error.response.data);\n  }\n});\n// End Method\n\nexport const send_withdrawal_request = createAsyncThunk('payment/send_withdrawal_request', async (info, {\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.post('/payment/withdrawal-request', info, {\n      withCredentials: true\n    });\n    return fulfillWithValue(data);\n  } catch (error) {\n    console.log(error.response.data);\n    return rejectWithValue(error.response.data);\n  }\n});\n// End Method\n\nexport const get_payment_request = createAsyncThunk('payment/get_payment_request', async (_, {\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get('/payment/request', {\n      withCredentials: true\n    });\n    return fulfillWithValue(data);\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\n// End Method\n\nexport const confirm_payment_request = createAsyncThunk('payment/confirm_payment_request', async (paymentId, {\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.post(`/payment/confirm/${paymentId}`, {\n      paymentId\n    }, {\n      withCredentials: true\n    });\n    return fulfillWithValue(data);\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\n// End Method\n\nexport const PaymentReducer = createSlice({\n  name: 'payment',\n  initialState: {\n    successMessage: '',\n    errorMessage: '',\n    loader: false,\n    pendingWithdraws: [],\n    successWithdraws: [],\n    totalAmount: 0,\n    withdrawAmount: 0,\n    pendingAmount: 0,\n    availableAmount: 0\n  },\n  reducers: {\n    messageClear: (state, _) => {\n      state.successMessage = \"\";\n      state.errorMessage = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(get_seller_payment_details.fulfilled, (state, {\n      payload\n    }) => {\n      state.pendingWithdraws = payload.pendingWithdraws;\n      state.successWithdraws = payload.successWithdraws;\n      state.totalAmount = payload.totalAmount;\n      state.availableAmount = payload.availableAmount;\n      state.withdrawAmount = payload.withdrawAmount;\n      state.pendingAmount = payload.pendingAmount;\n    }).addCase(send_withdrawal_request.pending, (state, {\n      payload\n    }) => {\n      state.loader = true;\n    }).addCase(send_withdrawal_request.rejected, (state, {\n      payload\n    }) => {\n      state.loader = false;\n      state.errorMessage = payload.message;\n    }).addCase(send_withdrawal_request.fulfilled, (state, {\n      payload\n    }) => {\n      state.loader = false;\n      state.successMessage = payload.message;\n      if (payload.withdrawal) {\n        state.pendingWithdraws = [...state.pendingWithdraws, payload.withdrawal];\n        state.availableAmount = state.availableAmount - payload.withdrawal.amount;\n        state.pendingAmount = state.pendingAmount + payload.withdrawal.amount;\n      }\n    }).addCase(get_payment_request.fulfilled, (state, {\n      payload\n    }) => {\n      state.pendingWithdraws = payload.withdrawalRequest;\n    }).addCase(confirm_payment_request.pending, (state, {\n      payload\n    }) => {\n      state.loader = true;\n    }).addCase(confirm_payment_request.rejected, (state, {\n      payload\n    }) => {\n      state.loader = false;\n      state.errorMessage = payload.message;\n    }).addCase(confirm_payment_request.fulfilled, (state, {\n      payload\n    }) => {\n      state.loader = false;\n      state.successMessage = payload.message;\n      state.pendingWithdraws = state.pendingWithdraws.filter(item => item._id !== payload.withdrawal._id);\n    });\n  }\n});\nexport const {\n  messageClear\n} = PaymentReducer.actions;\nexport default PaymentReducer.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","api","get_seller_payment_details","sellerId","rejectWithValue","fulfillWithValue","data","get","withCredentials","error","response","send_withdrawal_request","info","post","console","log","get_payment_request","_","confirm_payment_request","paymentId","PaymentReducer","name","initialState","successMessage","errorMessage","loader","pendingWithdraws","successWithdraws","totalAmount","withdrawAmount","pendingAmount","availableAmount","reducers","messageClear","state","extraReducers","builder","addCase","fulfilled","payload","pending","rejected","message","withdrawal","amount","withdrawalRequest","filter","item","_id","actions","reducer"],"sources":["C:/Users/Admin/GR1_E-Commerce_Project/dashboard-frontend/src/store/Reducers/paymentReducer.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport api from \"../../api/api\";\r\n\r\nexport const get_seller_payment_details = createAsyncThunk(\r\n    'payment/get_seller_payment_details',\r\n    async (sellerId, { rejectWithValue, fulfillWithValue }) => {\r\n        try {\r\n            const { data } = await api.get(`/payment/seller-payment-details/${sellerId} `, { withCredentials: true })\r\n            return fulfillWithValue(data)\r\n        } catch (error) {\r\n            // console.log(error.response.data)\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n// End Method\r\n\r\nexport const send_withdrawal_request = createAsyncThunk(\r\n    'payment/send_withdrawal_request',\r\n    async (info, { rejectWithValue, fulfillWithValue }) => {\r\n        try {\r\n            const { data } = await api.post('/payment/withdrawal-request', info, { withCredentials: true })\r\n            return fulfillWithValue(data)\r\n        } catch (error) {\r\n            console.log(error.response.data)\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n// End Method\r\n\r\nexport const get_payment_request = createAsyncThunk(\r\n    'payment/get_payment_request',\r\n    async(_, { rejectWithValue, fulfillWithValue }) => {\r\n        try {\r\n            const {data} = await api.get('/payment/request', { withCredentials: true })\r\n            return fulfillWithValue(data)\r\n        } catch (error) {\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n// End Method\r\n\r\nexport const confirm_payment_request = createAsyncThunk(\r\n    'payment/confirm_payment_request',\r\n    async (paymentId, { rejectWithValue, fulfillWithValue }) => {\r\n        try {\r\n            const {data} = await api.post(`/payment/confirm/${paymentId}`, {paymentId}, { withCredentials: true })\r\n            return fulfillWithValue(data)\r\n        } catch (error) {\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n// End Method\r\n\r\nexport const PaymentReducer = createSlice({\r\n    name: 'payment',\r\n    initialState: {\r\n        successMessage: '',\r\n        errorMessage: '',\r\n        loader: false,\r\n        pendingWithdraws: [],\r\n        successWithdraws: [],\r\n        totalAmount: 0,\r\n        withdrawAmount: 0,\r\n        pendingAmount: 0,\r\n        availableAmount: 0,\r\n    },\r\n    reducers: {\r\n\r\n        messageClear: (state, _) => {\r\n            state.successMessage = \"\"\r\n            state.errorMessage = \"\"\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(get_seller_payment_details.fulfilled, (state, { payload }) => {\r\n            state.pendingWithdraws = payload.pendingWithdraws;\r\n            state.successWithdraws = payload.successWithdraws;\r\n            state.totalAmount = payload.totalAmount;\r\n            state.availableAmount = payload.availableAmount;\r\n            state.withdrawAmount = payload.withdrawAmount;\r\n            state.pendingAmount = payload.pendingAmount; \r\n            })\r\n            .addCase(send_withdrawal_request.pending, (state, { payload }) => {\r\n                state.loader = true\r\n            })\r\n            .addCase(send_withdrawal_request.rejected, (state, { payload }) => {\r\n                state.loader = false\r\n                state.errorMessage = payload.message\r\n            })\r\n            .addCase(send_withdrawal_request.fulfilled, (state, { payload }) => {\r\n                state.loader = false;\r\n                state.successMessage = payload.message;\r\n                if (payload.withdrawal) {\r\n                    state.pendingWithdraws = [...state.pendingWithdraws, payload.withdrawal];\r\n                    state.availableAmount = state.availableAmount - payload.withdrawal.amount;\r\n                    state.pendingAmount = state.pendingAmount + payload.withdrawal.amount;\r\n                }\r\n            })\r\n            .addCase(get_payment_request.fulfilled, (state, { payload }) => {\r\n                state.pendingWithdraws = payload.withdrawalRequest\r\n            })\r\n            .addCase(confirm_payment_request.pending, (state, { payload }) => {\r\n                state.loader = true\r\n            })\r\n            .addCase(confirm_payment_request.rejected, (state, { payload }) => {\r\n                state.loader = false\r\n                state.errorMessage = payload.message\r\n            })\r\n            .addCase(confirm_payment_request.fulfilled, (state, { payload }) => {\r\n                state.loader = false\r\n                state.successMessage = payload.message\r\n                state.pendingWithdraws = state.pendingWithdraws.filter((item) => item._id !== payload.withdrawal._id)\r\n            })\r\n    }\r\n\r\n})\r\nexport const { messageClear } = PaymentReducer.actions\r\nexport default PaymentReducer.reducer"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}