{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../../api/api\";\nexport const categoryAdd = createAsyncThunk('category/categoryAdd', async ({\n  name,\n  image\n}, {\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  try {\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('image', image);\n    const {\n      data\n    } = await api.post('/category-add', formData, {\n      withCredentials: true\n    });\n    // console.log(data)\n    return fulfillWithValue(data);\n  } catch (error) {\n    // console.log(error.response.data)\n    return rejectWithValue(error.response.data);\n  }\n});\n\n// End Method \n\nexport const get_category = createAsyncThunk('category/get_category', async ({\n  parPage,\n  page,\n  searchValue\n}, {\n  rejectWithValue,\n  fulfillWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get(`/category-get?page=${page}&&searchValue=${searchValue}&&parPage=${parPage}`, {\n      withCredentials: true\n    });\n    console.log(data);\n    return fulfillWithValue(data);\n  } catch (error) {\n    // console.log(error.response.data)\n    return rejectWithValue(error.response.data);\n  }\n});\n\n// End Method \n\nexport const categoryReducer = createSlice({\n  name: 'category',\n  initialState: {\n    successMessage: '',\n    errorMessage: '',\n    loader: false,\n    categorys: [],\n    totalCategory: 0\n  },\n  reducers: {\n    messageClear: (state, _) => {\n      state.errorMessage = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(categoryAdd.pending, (state, {\n      payload\n    }) => {\n      state.loader = true;\n    }).addCase(categoryAdd.rejected, (state, {\n      payload\n    }) => {\n      state.loader = false;\n      state.errorMessage = payload.error;\n    }).addCase(categoryAdd.fulfilled, (state, {\n      payload\n    }) => {\n      state.loader = false;\n      state.successMessage = payload.message;\n      state.categorys = [...state.categorys, payload.category];\n    }).addCase(get_category.fulfilled, (state, {\n      payload\n    }) => {\n      state.totalCategory = payload.totalCategory;\n      state.categorys = payload.categorys;\n    });\n  }\n});\nexport const {\n  messageClear\n} = categoryReducer.actions;\nexport default categoryReducer.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","api","categoryAdd","name","image","rejectWithValue","fulfillWithValue","formData","FormData","append","data","post","withCredentials","error","response","get_category","parPage","page","searchValue","get","console","log","categoryReducer","initialState","successMessage","errorMessage","loader","categorys","totalCategory","reducers","messageClear","state","_","extraReducers","builder","addCase","pending","payload","rejected","fulfilled","message","category","actions","reducer"],"sources":["C:/Users/Admin/GR1_E-Commerce_Project/dashboard-frontend/src/store/Reducers/categoryReducer.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport api from \"../../api/api\"; \r\n\r\nexport const categoryAdd = createAsyncThunk(\r\n    'category/categoryAdd',\r\n    async({ name,image },{rejectWithValue, fulfillWithValue}) => {\r\n        \r\n        try {\r\n            const formData = new FormData()\r\n            formData.append('name', name)\r\n            formData.append('image', image)\r\n            const {data} = await api.post('/category-add',formData,{withCredentials: true}) \r\n            // console.log(data)\r\n            return fulfillWithValue(data)\r\n        } catch (error) {\r\n            // console.log(error.response.data)\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n\r\n// End Method \r\n\r\nexport const get_category = createAsyncThunk(\r\n    'category/get_category',\r\n    async({ parPage,page,searchValue },{rejectWithValue, fulfillWithValue}) => {\r\n        \r\n        try {\r\n             \r\n            const {data} = await api.get(`/category-get?page=${page}&&searchValue=${searchValue}&&parPage=${parPage}`,{withCredentials: true}) \r\n            console.log(data)\r\n            return fulfillWithValue(data)\r\n        } catch (error) {\r\n            // console.log(error.response.data)\r\n            return rejectWithValue(error.response.data)\r\n        }\r\n    }\r\n)\r\n\r\n  // End Method \r\n \r\nexport const categoryReducer = createSlice({\r\n    name: 'category',\r\n    initialState:{\r\n        successMessage :  '',\r\n        errorMessage : '',\r\n        loader: false,\r\n        categorys : [],\r\n        totalCategory : 0,\r\n    },\r\n    reducers : {\r\n\r\n        messageClear : (state,_) => {\r\n            state.errorMessage = \"\"\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(categoryAdd.pending, (state, { payload }) => {\r\n            state.loader = true;\r\n        })\r\n        .addCase(categoryAdd.rejected, (state, { payload }) => {\r\n            state.loader = false;\r\n            state.errorMessage = payload.error\r\n        }) \r\n        .addCase(categoryAdd.fulfilled, (state, { payload }) => {\r\n            state.loader = false;\r\n            state.successMessage = payload.message\r\n            state.categorys = [...state.categorys, payload.category]\r\n             \r\n        })\r\n        .addCase(get_category.fulfilled, (state, { payload }) => {\r\n            state.totalCategory = payload.totalCategory;\r\n            state.categorys = payload.categorys;\r\n             \r\n        })\r\n \r\n\r\n    }\r\n\r\n})\r\nexport const {messageClear} = categoryReducer.actions\r\nexport default categoryReducer.reducer"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}